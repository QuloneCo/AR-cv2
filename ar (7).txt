import cv2
import numpy as np
import pyautogui

# Настройки для управления калькулятором
# Здесь вы можете задать свои значения, чтобы соответствовать вашей камере и жесту

# Верхние и нижние значения HSV для пальца
lower_hsv = np.array([0, 20, 70])
upper_hsv = np.array([20, 255, 255])

# Минимальная площадь, необходимая для распознавания контура пальца
min_area = 1000

# Инициализация камеры
cap = cv2.VideoCapture(0)

# Цикл обработки видеопотока
while True:
    # Считывание кадра из видеопотока
    ret, frame = cap.read()

    if not ret:
        break

    # Преобразование кадра в пространство цветов HSV
    hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Применение фильтра HSV для выделения пальца
    mask = cv2.inRange(hsv_frame, lower_hsv, upper_hsv)

    # Применение морфологических операций для удаления шума
    kernel = np.ones((5, 5), np.uint8)
    mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)
    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)

    # Нахождение контуров на маске
    contours, _ = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    if len(contours) > 0:
        # Нахождение контура максимального размера
        max_contour = max(contours, key=cv2.contourArea)

        # Проверка, превышает ли контур минимальную площадь
        if cv2.contourArea(max_contour) > min_area:
            # Нахождение центра контура и его координаты
            M = cv2.moments(max_contour)
            center = (int(M['m10'] / M['m00']), int(M['m01'] / M['m00']))
            x, y = center

            # Ваш код для управления калькулятором на основе координат x и y пальца
            # Например, можно задать определенный диапазон значений x и y для каждой кнопки калькулятора 
            # и активировать соответствующую кнопку, когда палец находится в этом диапазоне

            # Движение курсора мыши в соответствии с координатами пальца
            pyautogui.moveTo(x, y)

    # Отображение маски и кадра
    cv2.imshow('Mask', mask)
    cv2.imshow('Frame', frame)

    # Выход из цикла при нажатии клавиши 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Освобождение ресурсов
cap.release()
cv2.destroyAllWindows()